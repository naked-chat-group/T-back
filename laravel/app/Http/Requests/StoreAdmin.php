<?php

namespace App\Http\Requests;

use Illuminate\Validation\ValidationException;
use Symfony\Component\HttpFoundation\Response;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;

class StoreAdmin extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            'admin_name' => 'required|unique:shop_admin,admin_name|regex:/^[a-zA-Z]{4,16}$/',
            'password' => 'required|regex:/(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[$@!%*#?&])[A-Za-z\d$@!%*#?&]{6,}$/',
            'confirmPassword' => 'required|same:password',
            'role_id' => 'required',
            'email' => 'required|email'
        ];
    }

    public function messages()
    {
//        return parent::messages(); // TODO: Change the autogenerated stub
        return [
            'admin_name.required' => '管理员名称不能为空',
            'admin_name.not_regex' => '用户名称为4-16位字母组成',
            'admin_name.unique' => '管理员名称已经存在',
            'password.required' => '密码不能为空',
            'password.regex' => '密码最少6位,且至少一位大写字母,一个数字,一个特殊字符,一个小写字母',
            'confirmPassword.require' => '请确认密码',
            'confirmPassword.same' => '请确认密码',
            'role_id.required' => '角色不能为空',
            'email.required' => '邮箱不能为空',
            'email.email' => '请输入正确的邮箱'
        ];
    }

    //重写返回
    protected function failedValidation(Validator $validator)
    {
//        parent::failedValidation($validator); // TODO: Change the autogenerated stub
        $data = [
            'code' => 422,
            'msg' => $validator->errors()->first(),
        ];
        $response = new Response(json_encode($data));
        throw (new ValidationException($validator, $response))
            ->errorBag($this->errorBag)
            ->redirectTo($this->getRedirectUrl());
    }
}
